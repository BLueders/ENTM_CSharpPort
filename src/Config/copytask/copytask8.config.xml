<?xml version="1.0" encoding="utf-8" ?>
<Config>

  <!-- The name of the experiment -->
  <Name>CopyTask</Name>

  <!-- The fully qualified name of the experiment class -->
  <ExperimentClass>ENTM.Experiments.CopyTask.CopyTaskExperiment</ExperimentClass>

  <!-- Experiment description -->
  <Description>
    Copy task experiment with turing controller.
    The controller must record a bit-vector sequence to memory, and read it back.
  </Description>

  <!-- How many experiments will be performed (serially) -->
  <ExperimentCount>20</ExperimentCount>

  <!-- The maximum number of generations that the experiment will run before terminating if the maximum fitness has not been achieved. -1 for unlimited -->
  <MaxGenerations>1500</MaxGenerations>

  <!-- NEAT -->
  <PopulationSize>300</PopulationSize>

  <!-- The generation interval between writing the status to the log -->
  <LogInterval>100</LogInterval>

  <!-- Wether or not to use parallel or serial evaluation. Parallel is faster, but serial can be necessary for debugging -->
  <MultiThreading>true</MultiThreading>

  <!-- Maximum number of threads if multithreading is enabled. -1 defaults to CPU core count -->
  <MaxDegreeOfParallelism>-1</MaxDegreeOfParallelism>


  <!-- Turing Machine Parameters-->
  <TuringMachineParams>

    <!-- If set to false, the Turing machine will always return a 0 vector -->
    <Enabled>true</Enabled>

    <!-- Maximum memory size (-1 for unlimited) -->
    <N>-1</N>

    <!-- Write vector size -->
    <M>5</M>

    <!-- Minimum similarity of the turing data vector to consider this location for a content jump -->
    <MinSimilarityToJump>0.5</MinSimilarityToJump>

    <!-- Number of Read/Write heads-->
    <Heads>1</Heads>

    <!-- Number of shift inputs -->
    <ShiftLength>3</ShiftLength>

    <!-- "Single" or "Multiple". Single has only a single input value, multiple has 3 for [-1, 0, 1] -->
    <ShiftMode>Multiple</ShiftMode>

    <!-- "Interpolate" or "Absolute". 
        Interpolate: Turing machine will interpolate between the write vector and the content already stored at the position.
        Absolute: Turing machine will overwrite if output is >= 0.5, otherwise it will not write.
    -->
    <WriteMode>Interpolate</WriteMode>

  </TuringMachineParams>


  <!-- Copy Task Parameters -->
  <CopyTaskParams>

    <!-- Evaluation iterations -->
    <Iterations>50</Iterations>

    <!-- The seed used for random environment generations -->
    <RandomSeed>0</RandomSeed>

    <!-- The size of the bit vectors to be copied. -->
    <VectorSize>2</VectorSize>

    <!-- Maximum length of the sequence of bit vectors. 
         If LengthRule is Random, sequence length will be betweeen 1 and MaxLength.
         If LengthRule is Fixed, sequence will always be MaxLength. -->
    <MaxLength>10</MaxLength>

    <!-- "Random" or "Fixed" sequence lengths -->
    <LengthRule>Random</LengthRule>

    <!-- What fitness function to evalutate with.
        StrictCloseToTarget
        PartialScore
        Emilarity
        ClosestBinary
        CompleteBinary
    -->
    <FitnessFunction>StrictCloseToTarget</FitnessFunction>

    <!-- Set to true to eliminate zero vectors in the sequence, as the algorithm can have problems with them. -->
    <EliminateZeroVectors>false</EliminateZeroVectors>

  </CopyTaskParams>


  <!-- Novelty Search Parameters -->
  <NoveltySearch>

    <!-- If false, only environmental objective fitness will be used. -->
    <Enabled>false</Enabled>

    <!-- What behaviour we want to score
      WritePattern: Use the write position over time as the novelty vector.
      ReadContent: Use the read vector over time as the novelty vector.
      -->
    <NoveltyVector>ReadContent</NoveltyVector>

    <!-- The minimum novelty score an individual must achieve to be entered into the archive. -->
    <PMin>40</PMin>

    <!-- The maximum size of the behaviour archive. -1 for unlimited. -->
    <ArchiveLimit>500</ArchiveLimit>

    <!-- PMin up adjustment factor-->
    <PMinAdjustUp>1.05</PMinAdjustUp>

    <!-- PMin down adjustment factor -->
    <PMinAdjustDown>0.95</PMinAdjustDown>

    <!-- If PMin is adjusted lower than this threshold, novelty search will end. -->
    <PMinLowerThreshold>10</PMinLowerThreshold>

    <!-- How many individuals can be added to the archive in a generation before PMin is adjusted up -->
    <AdditionsPMinAdjustUp>4</AdditionsPMinAdjustUp>

    <!-- How many generations without archihve additions before PMin is adjusted down -->
    <GenerationsPMinAdjustDown>5</GenerationsPMinAdjustDown>

    <!-- Maximum number of generations that the novelty search will run before switching to objective search -->
    <MaxNoveltySearchGenerations>500</MaxNoveltySearchGenerations>

    <!-- K nearest neighbors -->
    <K>10</K>

    <!-- How often the novelty scorer should report to the log (generations) -->
    <ReportInterval>10</ReportInterval>

    <!-- How many redundant iterations an individual can have before it does not meet minimum criteria. 
      0-1 relative to total timesteps during lifetime. -->
    <MinimumCriteriaReadWriteLowerThreshold>0.1</MinimumCriteriaReadWriteLowerThreshold>

  </NoveltySearch>


  <!-- The network activation scheme to use -->
  <Activation>

    <!-- "Acyclic", "CyclicFixedIters" or "CyclicRelax"
         Acyclic:           Does not support recurrent connections. Network is fully activated each activation.
         CyclicFixedIters:  Each iteration will iterate signals one step from input -> output.
         CyclicRelax:       Activate the network until all node output has remained unchanged between iterations within the threshold, 
                            or until the maximum iteration count is reached. -->
    <Scheme>Acyclic</Scheme>

    <!-- CyclicFixedIters only -->
    <Iters>3</Iters>

    <!-- CyclicRelax only -->
    <Threshold>0.1</Threshold>

    <!-- CyclicRelax only -->
    <MaxIters>5</MaxIters>

  </Activation>


  <!-- Complexity Regulation Parameters -->
  <ComplexityRegulation>
    <!-- "Absolute" or "Relative"
       Absolute: Defines an absolute ceiling on complexity.
       Relative: Defines a relative ceiling on complexity. E.g. relative to the complexity at the end of the most recent simplification phase. -->
    <ComplexityRegulationStrategy>Absolute</ComplexityRegulationStrategy>

    <!-- The complexity ceiling. When complexity reaches this threshold, the algorithm will switch from complexifying to simplification -->
    <ComplexityThreshold>120</ComplexityThreshold>

  </ComplexityRegulation>


  <!-- Evolution Algorithm Parameters -->
  <EAParams>
    <!-- Number of species in the population. Default: 10 -->
    <SpecieCount>10</SpecieCount>

    <!-- We sort specie genomes by fitness and keep the top N%, the other genomes are removed to make way for the offspring. Default: 0.2  -->
    <ElitismProportion>0.2</ElitismProportion>

    <!-- We sort specie genomes by fitness and select parent genomes for producing offspring from the top N%. 
         Selection is performed prior to elitism being applied, therefore selecting from more genomes than will be made elite is possible. Default: 0.2 -->
    <SelectionProportion>0.6</SelectionProportion>

    <!-- The proportion of offspring to be produced from asexual reproduction (mutation). Default: 0.5 -->
    <OffspringAsexualProportion>0.8</OffspringAsexualProportion>

    <!-- The proportion of offspring to be produced from sexual reproduction. Default: 0.5 -->
    <OffspringSexualProportion>0.2</OffspringSexualProportion>

    <!-- The proportion of sexual reproductions that will use genomes from different species. Default: 0.01 -->
    <InterspeciesMatingProportion>0.01</InterspeciesMatingProportion>

    <!-- The history buffer length used for calculating the best fitness moving average. Default: 100 -->
    <BestFitnessMovingAverageHistoryLength>100</BestFitnessMovingAverageHistoryLength>

    <!-- The history buffer length used for calculating the mean specie champ fitness. Default: 100 -->
    <MeanSpecieChampFitnessMovingAverageHistoryLength>100</MeanSpecieChampFitnessMovingAverageHistoryLength>

    <!-- The history buffer length used for calculating the mean genome complexity moving. Default: 100 -->
    <ComplexityMovingAverageHistoryLength>100</ComplexityMovingAverageHistoryLength>
  </EAParams>


  <!-- Genome Parameters -->
  <GenomeParams>
    <!-- The connection weight range to use in NEAT genomes. E.g. a value of 5 defines a weight range of -5 to 5. 
         The weight range is strictly enforced - e.g. when creating new connections and mutating existing ones. Default: 5.0 -->
    <ConnectionWeightRange>15.0</ConnectionWeightRange>

    <!-- A proportion that specifies the number of interconnections to make between input and output neurons in an initial random population. 
         This is a proportion of the total number of possible interconnections. Default: 0.05 -->
    <InitialInterconnectionsProportion>.85</InitialInterconnectionsProportion>

    <!-- The probability that all excess and disjoint genes are copied into an offspring genome during sexual reproduction. 
         Currently the execss/disjoint genes are copied in an all or nothing strategy. Default: 0.1 -->
    <DisjointExcessGenesRecombinedProbability>.3</DisjointExcessGenesRecombinedProbability>

    <!-- The probability that a genome mutation operates on genome connection weights. Default: 0.988 -->
    <ConnectionWeightMutationProbability>0.988</ConnectionWeightMutationProbability>

    <!-- The probability that a genome mutation is an 'add node' mutation. Default: 0.001 -->
    <AddNodeMutationProbability>0.001</AddNodeMutationProbability>

    <!-- The probability that a genome mutation is an 'add connection' mutation. Default: 0.01 -->
    <AddConnectionMutationProbability>0.05</AddConnectionMutationProbability>

    <!-- The probability that a genome mutation is a 'node auxiliary state' mutation. Default: 0.00 -->
    <NodeAuxStateMutationProbability>0.00</NodeAuxStateMutationProbability>

    <!-- The probability that a genome mutation is a 'delete connection' mutation. Default: 0.001 -->
    <DeleteConnectionMutationProbability>0.02</DeleteConnectionMutationProbability>
  </GenomeParams>

</Config>